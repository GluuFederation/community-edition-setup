#!/usr/bin/env bash

# LSB Tags
### BEGIN INIT INFO
# Provides:          gluu-radius
# Required-Start:    $local_fs $network opendj
# Required-Stop:     $local_fs $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Gluu Radius start script.
# Description:       Start Gluu Radius Server.
### END INIT INFO

# Startup script for radius under *nix systems (it works under NT/cygwin too).

##################################################
# Set the name which is used by other variables.
# Defaults to the file name without extension.
##################################################
NAME=$(echo $(basename $0) | sed -e 's/^[SK][0-9]*//' -e 's/\.sh$//')

# To get the service to restart correctly on reboot, uncomment below (3 lines):
# ========================
# chkconfig: 345 72 28
# description: Radius 9 gluu-radius
# processname: radius
# ========================

# Configuration files 
# Currently Gluu Radius has only one configuration 
# in /etc/default/${NAME}
# The file is read at the start of a script. It may perform 
# any sequence of shell commands, like setting relevant environment variables.
# 
# Configuration variables 
#
# JVM_OPTS
#	Extra options to pass to the Java Virtual Machine
#
# JAVA
#	Command to invoke java. If not set, java 
#
# GLUU_RADIUS_INSTALL_DIR
#	The directory where Gluu Radius is installed. 
#
#
# GLUU_RADIUS_CONFIG_DIR
#	The directory containing Gluu Radius' configuration 
#
# GLUU_RADIUS_JAR
#	The jar file used to run Gluu Radius (used with the -jar option)
#
#
# GLUU_RADIUS_JAVA_MAIN
#	The java main class containing the server's endpoint
#
# GLUU_RADIUS_PID_DIR
#	The directory where Gluu Radius' PID file will be stored
# 
#
# GLUU_RADIUS_USER
#	The linux user under which Gluu Radius will run (debian systems)
#
# GLUU_RADIUS_GROUP
#   The linux group under which Gluu Radius will run (debian systems)
#
# GLUU_RADIUS_START_TIMEOUT
#	Time spent waiting to see if service startup was successful/failed. Defaults to 60 seconds.
#
#


usage()
{
    echo "Usage: ${0##*/} [-d] {start|stop|run|restart|check|supervise} [ CONFIGS ... ] "
    exit 1
}

[ $# -gt 0 ] || usage


##################################################
# Some utility functions
##################################################
findDirectory()
{
  local L OP=$1
  shift
  for L in "$@"; do
    [ "$OP" "$L" ] || continue
    printf %s "$L"
    break
  done
}

running()
{
  if [ -f "$1" ]
  then
    local PID=$(cat "$1" 2>/dev/null) || return 1
    kill -0 "$PID" 2>/dev/null
    return
  fi
  rm -f "$1"
  return 1
}

started()
{
  # wait for 60s to see "STARTED" in PID file
  for ((T = 0; T < $(($3 / 4)); T++))
  do
    sleep 4
    [ -z "$(grep STARTED $1 2>/dev/null)" ] || return 0
    [ -z "$(grep STOPPED $1 2>/dev/null)" ] || return 1
    [ -z "$(grep FAILED $1 2>/dev/null)" ] || return 1
    local PID=$(cat "$2" 2>/dev/null) || return 1
    kill -0 "$PID" 2>/dev/null || return 1
    echo -n ". "
  done

  return 1;
}


readConfig()
{
  (( DEBUG )) && echo "Reading $1.."
  source "$1"
}

dumpEnv()
{
    echo "JAVA                  	=  $JAVA"
    echo "JVM_OPTS              	=  ${JVM_OPTS[*]}"
	echo "GLUU_RADIUS_INSTALL_DIR	=  $GLUU_RADIUS_INSTALL_DIR"
	echo "GLUU_RADIUS_CONFIG_DIR	=  $GLUU_RADIUS_CONFIG_DIR"
	echo "GLUU_RADIUS_JAR			=  $GLUU_RADIUS_JAR"
	echo "GLUU_RADIUS_JAVA_MAIN		=  $GLUU_RADIUS_JAVA_MAIN"
	echo "GLUU_RADIUS_PID_DIR		=  $GLUU_RADIUS_PID_DIR"
	echo "GLUU_RADIUS_USER			=  $GLUU_RADIUS_USER"
	echo "GLUU_RADIUS_GROUP			=  $GLUU_RADIUS_GROUP"
	echo "GLUU_RADIUS_START_TIMEOUT =  $GLUU_RADIUS_START_TIMEOUT"
	echo "RUN_CMD					=  ${RUN_CMD[*]}"
}



##################################################
# Get the action & configs
##################################################
CONFIGS=()
NO_START=0
DEBUG=0

while [[ $1 = -* ]]; do
  case $1 in
    -d) DEBUG=1 ;;
  esac
  shift
done
ACTION=$1
shift

##################################################
# Read any configuration files
##################################################
ETC=/etc
if [ $UID != 0 ]
then
  ETC=$HOME/etc
fi

for CONFIG in {/etc,~/etc}/default/${NAME}{,9} $HOME/.${NAME}rc; do
  if [ -f "$CONFIG" ] ; then
    readConfig "$CONFIG"
  fi
done


##################################################
# Set tmp if not already set.
##################################################
TMPDIR=${TMPDIR:-/tmp}

##################################################
# Radius's hallmark
##################################################
RADIUS_INSTALL_TRACE_FILE="${GLUU_RADIUS_JAR}"





#####################################################
# Check that radius is where we think it is
#####################################################
if [ ! -r "$GLUU_RADIUS_INSTALL_DIR/$RADIUS_INSTALL_TRACE_FILE" ]
then
  echo "** ERROR: Oops! Gluu Radius doesn't appear to be installed in $GLUU_RADIUS_INSTALL_DIR"
  echo "** ERROR:  $RADIUS_HOME/$RADIUS_INSTALL_TRACE_FILE is not readable!"
  exit 1
fi

#####################################################
# Find a location for the pid file
#####################################################
if [ -z "$RADIUS_RUN" ]
then
  RADIUS_RUN=$(findDirectory -w /var/run /usr/var/run /tmp $GLUU_RADIUS_PID_DIR)/radius
else
  GLUU_RADIUS_PID_DIR=$RADIUS_RUN
fi

[ -d "$RADIUS_RUN" ] || mkdir $RADIUS_RUN


#####################################################
# define start log location
#####################################################
if [ -z "$RADIUS_START_LOG" ]
then
  RADIUS_START_LOG="$RADIUS_RUN/$NAME-start.log"
fi

#####################################################
# Find a pid and state file
#####################################################
if [ -z "$PIDFILE" ]
then
  PIDFILE="$RADIUS_RUN/${NAME}.pid"
fi

if [ -z "$GLUU_RADIUS_STATE" ]
then
  GLUU_RADIUS_STATE=$GLUU_RADIUS_INSTALL_DIR/${NAME}.state
  touch $GLUU_RADIUS_STATE
  chown $GLUU_RADIUS_USER:$GLUU_RADIUS_GROUP $GLUU_RADIUS_STATE
fi

##################################################
# Setup JAVA if unset
##################################################
if [ -z "$JAVA" ]
then
  JAVA=$(which java)
fi

if [ -z "$JAVA" ]
then
  echo "Cannot find a Java JDK. Please set either set JAVA or put java (>=1.5) in your PATH." >&2
  exit 1
fi

#####################################################
# Set STARTED timeout
#####################################################
if [ -z "$GLUU_RADIUS_START_TIMEOUT" ]
then
  GLUU_RADIUS_START_TIMEOUT=60
fi

#####################################################
# Set STOP timeout
#####################################################
if [ -z "$GLUU_RADIUS_STOP_TIMEOUT" ]
then
	GLUU_RADIUS_STOP_TIMEOUT=30
fi

#####################################################
# This is how the Radius server will be started
#####################################################

RUN_ARGS=(${JAVA_OPTIONS[@]})
RUN_CMD=("$JAVA" ${RUN_ARGS[@]})

#####################################################
# Comment these out after you're happy with what
# the script is doing.
#####################################################
if (( DEBUG ))
then
  dumpEnv
fi

##################################################
# Do the action
##################################################
case "$ACTION" in
  	start)
    		echo -n "Starting Gluu Radius: "

    		if (( NO_START )); then
      			echo "Not starting ${NAME} - NO_START=1";
      			exit
    		fi

    		if [ $UID -eq 0 ] && type start-stop-daemon > /dev/null 2>&1
    		then
      			unset CH_USER
      			if [ -n "$GLUU_RADIUS_USER" ]
      			then
        			CH_USER="-c$GLUU_RADIUS_USER"
      			fi

                	start-stop-daemon --start \
                        	--quiet \
                        	--pidfile "$PIDFILE" \
                        	--user $GLUU_RADIUS_USER \
                        	--exec "${JAVA}" \
                        	--test > /dev/null \
                        	|| return 1
	
                	start-stop-daemon --start \
                        	--quiet \
                        	--make-pidfile \
                        	--pidfile $PIDFILE \
                        	--chuid $GLUU_RADIUS_USER \
                        	--user  $GLUU_RADIUS_USER  \
                        	--group $GLUU_RADIUS_GROUP \
                        	--chdir "$GLUU_RADIUS_INSTALL_DIR" \
                        	--background \
                        	--exec "$JAVA" \
                        	-- ${RUN_ARGS[*]} \
                        	|| return 2

			echo "STARTED" > "$GLUU_RADIUS_STATE"
			echo "OK"
	
    		else

      			if running $PIDFILE
      			then
        			echo "Already Running! PID $(cat $PIDFILE)"
        			exit 1
      			fi

      			if [ -n "$GLUU_RADIUS_USER" ] && [ `whoami` != "$GLUU_RADIUS_USER" ]
      			then
        			unset SU_SHELL
        			if [ "$GLUU_RADIUS_SHELL" ]
        			then
          				SU_SHELL="-s $GLUU_RADIUS_SHELL"
        			fi

        			touch "$PIDFILE"
        			chown "$GLUU_RADIUS_USER":"$GLUU_RADIUS_GROUP" "$PIDFILE"
        			# FIXME: Broken solution: wordsplitting, pathname expansion, arbitrary command execution, etc.
        			su - "$GLUU_RADIUS_USER" $SU_SHELL -c "
          			cd "$GLUU_RADIUS_INSTALL_DIR"
          			exec ${RUN_CMD[*]} start-log-file=\"$RADIUS_START_LOG\" > /dev/null &
          			disown \$!
          			echo \$! > \"$PIDFILE\"
				echo "STARTED" > \"$GLUU_RADIUS_STATE\""
      			else
          			cd "$GLUU_RADIUS_INSTALL_DIR"
        			"${RUN_CMD[@]}" > /dev/null &
        			disown $!
        			echo $! > "$PIDFILE"
				echo "STARTED" > "$GLUU_RADIUS_STATE"
      			fi

    		fi

    	;;

  stop)
    	echo -n "Stopping Gluu Radius: "
    	if [ $UID -eq 0 ] && type start-stop-daemon > /dev/null 2>&1; then
      		start-stop-daemon -K -p"$PIDFILE" -d"$GLUU_RADIUS_INSTALL_DIR" -a "$JAVA" -s HUP

			TIMEOUT=$GLUU_RADIUS_STOP_TIMEOUT
      		while running "$PIDFILE"; do
        		if (( TIMEOUT-- == 0 )); then
          			start-stop-daemon -K -p"$PIDFILE" -d"$GLUU_RADIUS_INSTALL_DIR" -a "$JAVA" -s KILL
        		fi

        		sleep 1
      		done
    	else
      		if [ ! -f "$PIDFILE" ] ; then
        		echo "ERROR: no pid found at $PIDFILE"
        		exit 1
      		fi

      		PID=$(cat "$PIDFILE" 2>/dev/null)
      		if [ -z "$PID" ] ; then
        		echo "ERROR: no pid id found in $PIDFILE"
        		exit 1
      		fi
      		kill "$PID" 2>/dev/null

      		TIMEOUT=$GLUU_RADIUS_STOP_TIMEOUT
      		while running $PIDFILE; do
        		if (( TIMEOUT-- == 0 )); then
          			kill -KILL "$PID" 2>/dev/null
        		fi

        		sleep 1
      		done
    	fi

    	rm -f "$PIDFILE"
    	rm -f "$GLUU_RADIUS_STATE"
    	echo OK

    	;;

  restart)
    	GLUU_RADIUS_SH=$0
    	> "$GLUU_RADIUS_STATE"

    	"$GLUU_RADIUS_SH" stop "$@"
    	"$GLUU_RADIUS_SH" start "$@"

    	;;

  supervise)
    	#
    	# Under control of daemontools supervise monitor which
    	# handles restarts and shutdowns via the svc program.
    	#
    	exec "${RUN_CMD[@]}"
	
    	;;

  run|demo)
    	echo "Running Gluu Radius: "
	
    	if running "$PIDFILE"
    	then
      		echo Already Running $(cat "$PIDFILE")!
      		exit 1
    	fi

    	exec "${RUN_CMD[@]}"
    	;;

  check|status)
    	if running "$PIDFILE"
    	then
      		echo "Gluu Radius is running. Process Id $(< "$PIDFILE")"
    	else
      		echo "Gluu Radius is NOT running"
    	fi
    	echo
    	dumpEnv
    	echo

    	if running "$PIDFILE"
    	then
      		exit 0
    	fi
    	exit 1
	
    	;;

  *)
    	usage

    	;;
esac

exit 0
